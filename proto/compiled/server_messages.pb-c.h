/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: server_messages.proto */

#ifndef PROTOBUF_C_server_5fmessages_2eproto__INCLUDED
#define PROTOBUF_C_server_5fmessages_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _MessageToServerProto MessageToServerProto;
typedef struct _LizardProto LizardProto;
typedef struct _RoachProto RoachProto;
typedef struct _WaspProto WaspProto;
typedef struct _FieldUpdateMovementProto FieldUpdateMovementProto;
typedef struct _FieldUpdateConnectProto FieldUpdateConnectProto;
typedef struct _FieldUpdateDisconnectProto FieldUpdateDisconnectProto;
typedef struct _RoachMoverMessageProto RoachMoverMessageProto;
typedef struct _LizardMoverMessageProto LizardMoverMessageProto;
typedef struct _WaspMoverMessageProto WaspMoverMessageProto;


/* --- enums --- */

typedef enum _DirectionProto {
  DIRECTION_PROTO__UP = 0,
  DIRECTION_PROTO__DOWN = 1,
  DIRECTION_PROTO__LEFT = 2,
  DIRECTION_PROTO__RIGHT = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DIRECTION_PROTO)
} DirectionProto;
typedef enum _MessageTypeProto {
  MESSAGE_TYPE_PROTO__CONNECT = 0,
  MESSAGE_TYPE_PROTO__MOVEMENT = 1,
  MESSAGE_TYPE_PROTO__DISCONNECT = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MESSAGE_TYPE_PROTO)
} MessageTypeProto;
typedef enum _ClientTypeProto {
  CLIENT_TYPE_PROTO__LIZARD = 0,
  CLIENT_TYPE_PROTO__ROACH = 1,
  CLIENT_TYPE_PROTO__WASP = 2,
  CLIENT_TYPE_PROTO__DISPLAY_APP = 3,
  CLIENT_TYPE_PROTO__LIZARD_BODY = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLIENT_TYPE_PROTO)
} ClientTypeProto;

/* --- messages --- */

/*
 * Message structure
 */
struct  _MessageToServerProto
{
  ProtobufCMessage base;
  /*
   * 1 = lizard, 2 = roach, 3 = display-app
   */
  int32_t client_id;
  /*
   * 1 = connect, 2 = movement
   */
  MessageTypeProto type;
  /*
   * usage depends on client_id and type
   */
  int32_t value;
  /*
   * direction to move the roach
   */
  DirectionProto direction;
  /*
   * true = message accepted, false = message rejected
   */
  protobuf_c_boolean message_accepted;
};
#define MESSAGE_TO_SERVER_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message_to_server_proto__descriptor) \
    , 0, MESSAGE_TYPE_PROTO__CONNECT, 0, DIRECTION_PROTO__UP, 0 }


/*
 * New structures
 */
struct  _LizardProto
{
  ProtobufCMessage base;
  int32_t ch;
  int32_t x;
  int32_t y;
  int32_t score;
  DirectionProto previous_direction;
  /*
   * True if winner, False otherwise
   */
  protobuf_c_boolean is_winner;
};
#define LIZARD_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lizard_proto__descriptor) \
    , 0, 0, 0, 0, DIRECTION_PROTO__UP, 0 }


struct  _RoachProto
{
  ProtobufCMessage base;
  int32_t ch;
  int32_t x;
  int32_t y;
  protobuf_c_boolean is_eaten;
  int64_t timestamp;
};
#define ROACH_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&roach_proto__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _WaspProto
{
  ProtobufCMessage base;
  int32_t ch;
  int32_t x;
  int32_t y;
};
#define WASP_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wasp_proto__descriptor) \
    , 0, 0, 0 }


struct  _FieldUpdateMovementProto
{
  ProtobufCMessage base;
  int32_t num_roaches;
  int32_t num_lizards;
  MessageToServerProto *message;
  int32_t new_x;
  int32_t new_y;
  DirectionProto prev_direction;
  protobuf_c_boolean is_eaten;
};
#define FIELD_UPDATE_MOVEMENT_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&field_update_movement_proto__descriptor) \
    , 0, 0, NULL, 0, 0, DIRECTION_PROTO__UP, 0 }


struct  _FieldUpdateConnectProto
{
  ProtobufCMessage base;
  int32_t client_id;
  int32_t position_in_array;
  LizardProto *connected_lizard;
  RoachProto *connected_roach;
  MessageToServerProto *message;
};
#define FIELD_UPDATE_CONNECT_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&field_update_connect_proto__descriptor) \
    , 0, 0, NULL, NULL, NULL }


struct  _FieldUpdateDisconnectProto
{
  ProtobufCMessage base;
  int32_t client_id;
  int32_t position_in_array;
  MessageToServerProto *message;
};
#define FIELD_UPDATE_DISCONNECT_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&field_update_disconnect_proto__descriptor) \
    , 0, 0, NULL }


struct  _RoachMoverMessageProto
{
  ProtobufCMessage base;
  /*
   * Array of Roach
   */
  size_t n_roaches;
  RoachProto **roaches;
  /*
   * Number of roaches
   */
  int32_t num_roaches;
  /*
   * Slot roaches
   */
  int32_t slot_roaches;
};
#define ROACH_MOVER_MESSAGE_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&roach_mover_message_proto__descriptor) \
    , 0,NULL, 0, 0 }


struct  _LizardMoverMessageProto
{
  ProtobufCMessage base;
  /*
   * Array of lizards
   */
  size_t n_lizards;
  LizardProto **lizards;
  /*
   * Number of lizards
   */
  int32_t num_lizards;
  /*
   * Slot lizards
   */
  int32_t slot_lizards;
};
#define LIZARD_MOVER_MESSAGE_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lizard_mover_message_proto__descriptor) \
    , 0,NULL, 0, 0 }


struct  _WaspMoverMessageProto
{
  ProtobufCMessage base;
  /*
   * Array of Wasp
   */
  size_t n_wasps;
  WaspProto **wasps;
  /*
   * Number of wasps
   */
  int32_t num_wasps;
  /*
   * Slot roaches
   */
  int32_t slot_wasps;
};
#define WASP_MOVER_MESSAGE_PROTO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wasp_mover_message_proto__descriptor) \
    , 0,NULL, 0, 0 }


/* MessageToServerProto methods */
void   message_to_server_proto__init
                     (MessageToServerProto         *message);
size_t message_to_server_proto__get_packed_size
                     (const MessageToServerProto   *message);
size_t message_to_server_proto__pack
                     (const MessageToServerProto   *message,
                      uint8_t             *out);
size_t message_to_server_proto__pack_to_buffer
                     (const MessageToServerProto   *message,
                      ProtobufCBuffer     *buffer);
MessageToServerProto *
       message_to_server_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message_to_server_proto__free_unpacked
                     (MessageToServerProto *message,
                      ProtobufCAllocator *allocator);
/* LizardProto methods */
void   lizard_proto__init
                     (LizardProto         *message);
size_t lizard_proto__get_packed_size
                     (const LizardProto   *message);
size_t lizard_proto__pack
                     (const LizardProto   *message,
                      uint8_t             *out);
size_t lizard_proto__pack_to_buffer
                     (const LizardProto   *message,
                      ProtobufCBuffer     *buffer);
LizardProto *
       lizard_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lizard_proto__free_unpacked
                     (LizardProto *message,
                      ProtobufCAllocator *allocator);
/* RoachProto methods */
void   roach_proto__init
                     (RoachProto         *message);
size_t roach_proto__get_packed_size
                     (const RoachProto   *message);
size_t roach_proto__pack
                     (const RoachProto   *message,
                      uint8_t             *out);
size_t roach_proto__pack_to_buffer
                     (const RoachProto   *message,
                      ProtobufCBuffer     *buffer);
RoachProto *
       roach_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   roach_proto__free_unpacked
                     (RoachProto *message,
                      ProtobufCAllocator *allocator);
/* WaspProto methods */
void   wasp_proto__init
                     (WaspProto         *message);
size_t wasp_proto__get_packed_size
                     (const WaspProto   *message);
size_t wasp_proto__pack
                     (const WaspProto   *message,
                      uint8_t             *out);
size_t wasp_proto__pack_to_buffer
                     (const WaspProto   *message,
                      ProtobufCBuffer     *buffer);
WaspProto *
       wasp_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wasp_proto__free_unpacked
                     (WaspProto *message,
                      ProtobufCAllocator *allocator);
/* FieldUpdateMovementProto methods */
void   field_update_movement_proto__init
                     (FieldUpdateMovementProto         *message);
size_t field_update_movement_proto__get_packed_size
                     (const FieldUpdateMovementProto   *message);
size_t field_update_movement_proto__pack
                     (const FieldUpdateMovementProto   *message,
                      uint8_t             *out);
size_t field_update_movement_proto__pack_to_buffer
                     (const FieldUpdateMovementProto   *message,
                      ProtobufCBuffer     *buffer);
FieldUpdateMovementProto *
       field_update_movement_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   field_update_movement_proto__free_unpacked
                     (FieldUpdateMovementProto *message,
                      ProtobufCAllocator *allocator);
/* FieldUpdateConnectProto methods */
void   field_update_connect_proto__init
                     (FieldUpdateConnectProto         *message);
size_t field_update_connect_proto__get_packed_size
                     (const FieldUpdateConnectProto   *message);
size_t field_update_connect_proto__pack
                     (const FieldUpdateConnectProto   *message,
                      uint8_t             *out);
size_t field_update_connect_proto__pack_to_buffer
                     (const FieldUpdateConnectProto   *message,
                      ProtobufCBuffer     *buffer);
FieldUpdateConnectProto *
       field_update_connect_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   field_update_connect_proto__free_unpacked
                     (FieldUpdateConnectProto *message,
                      ProtobufCAllocator *allocator);
/* FieldUpdateDisconnectProto methods */
void   field_update_disconnect_proto__init
                     (FieldUpdateDisconnectProto         *message);
size_t field_update_disconnect_proto__get_packed_size
                     (const FieldUpdateDisconnectProto   *message);
size_t field_update_disconnect_proto__pack
                     (const FieldUpdateDisconnectProto   *message,
                      uint8_t             *out);
size_t field_update_disconnect_proto__pack_to_buffer
                     (const FieldUpdateDisconnectProto   *message,
                      ProtobufCBuffer     *buffer);
FieldUpdateDisconnectProto *
       field_update_disconnect_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   field_update_disconnect_proto__free_unpacked
                     (FieldUpdateDisconnectProto *message,
                      ProtobufCAllocator *allocator);
/* RoachMoverMessageProto methods */
void   roach_mover_message_proto__init
                     (RoachMoverMessageProto         *message);
size_t roach_mover_message_proto__get_packed_size
                     (const RoachMoverMessageProto   *message);
size_t roach_mover_message_proto__pack
                     (const RoachMoverMessageProto   *message,
                      uint8_t             *out);
size_t roach_mover_message_proto__pack_to_buffer
                     (const RoachMoverMessageProto   *message,
                      ProtobufCBuffer     *buffer);
RoachMoverMessageProto *
       roach_mover_message_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   roach_mover_message_proto__free_unpacked
                     (RoachMoverMessageProto *message,
                      ProtobufCAllocator *allocator);
/* LizardMoverMessageProto methods */
void   lizard_mover_message_proto__init
                     (LizardMoverMessageProto         *message);
size_t lizard_mover_message_proto__get_packed_size
                     (const LizardMoverMessageProto   *message);
size_t lizard_mover_message_proto__pack
                     (const LizardMoverMessageProto   *message,
                      uint8_t             *out);
size_t lizard_mover_message_proto__pack_to_buffer
                     (const LizardMoverMessageProto   *message,
                      ProtobufCBuffer     *buffer);
LizardMoverMessageProto *
       lizard_mover_message_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lizard_mover_message_proto__free_unpacked
                     (LizardMoverMessageProto *message,
                      ProtobufCAllocator *allocator);
/* WaspMoverMessageProto methods */
void   wasp_mover_message_proto__init
                     (WaspMoverMessageProto         *message);
size_t wasp_mover_message_proto__get_packed_size
                     (const WaspMoverMessageProto   *message);
size_t wasp_mover_message_proto__pack
                     (const WaspMoverMessageProto   *message,
                      uint8_t             *out);
size_t wasp_mover_message_proto__pack_to_buffer
                     (const WaspMoverMessageProto   *message,
                      ProtobufCBuffer     *buffer);
WaspMoverMessageProto *
       wasp_mover_message_proto__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wasp_mover_message_proto__free_unpacked
                     (WaspMoverMessageProto *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*MessageToServerProto_Closure)
                 (const MessageToServerProto *message,
                  void *closure_data);
typedef void (*LizardProto_Closure)
                 (const LizardProto *message,
                  void *closure_data);
typedef void (*RoachProto_Closure)
                 (const RoachProto *message,
                  void *closure_data);
typedef void (*WaspProto_Closure)
                 (const WaspProto *message,
                  void *closure_data);
typedef void (*FieldUpdateMovementProto_Closure)
                 (const FieldUpdateMovementProto *message,
                  void *closure_data);
typedef void (*FieldUpdateConnectProto_Closure)
                 (const FieldUpdateConnectProto *message,
                  void *closure_data);
typedef void (*FieldUpdateDisconnectProto_Closure)
                 (const FieldUpdateDisconnectProto *message,
                  void *closure_data);
typedef void (*RoachMoverMessageProto_Closure)
                 (const RoachMoverMessageProto *message,
                  void *closure_data);
typedef void (*LizardMoverMessageProto_Closure)
                 (const LizardMoverMessageProto *message,
                  void *closure_data);
typedef void (*WaspMoverMessageProto_Closure)
                 (const WaspMoverMessageProto *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    direction_proto__descriptor;
extern const ProtobufCEnumDescriptor    message_type_proto__descriptor;
extern const ProtobufCEnumDescriptor    client_type_proto__descriptor;
extern const ProtobufCMessageDescriptor message_to_server_proto__descriptor;
extern const ProtobufCMessageDescriptor lizard_proto__descriptor;
extern const ProtobufCMessageDescriptor roach_proto__descriptor;
extern const ProtobufCMessageDescriptor wasp_proto__descriptor;
extern const ProtobufCMessageDescriptor field_update_movement_proto__descriptor;
extern const ProtobufCMessageDescriptor field_update_connect_proto__descriptor;
extern const ProtobufCMessageDescriptor field_update_disconnect_proto__descriptor;
extern const ProtobufCMessageDescriptor roach_mover_message_proto__descriptor;
extern const ProtobufCMessageDescriptor lizard_mover_message_proto__descriptor;
extern const ProtobufCMessageDescriptor wasp_mover_message_proto__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_server_5fmessages_2eproto__INCLUDED */
