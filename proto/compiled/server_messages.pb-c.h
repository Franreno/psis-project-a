/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: server_messages.proto */

#ifndef PROTOBUF_C_server_5fmessages_2eproto__INCLUDED
#define PROTOBUF_C_server_5fmessages_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _MessageToServer MessageToServer;
typedef struct _Lizard Lizard;
typedef struct _Roach Roach;
typedef struct _Wasp Wasp;
typedef struct _FieldUpdateMovement FieldUpdateMovement;
typedef struct _FieldUpdateConnect FieldUpdateConnect;
typedef struct _FieldUpdateDisconnect FieldUpdateDisconnect;
typedef struct _RoachMoverMessage RoachMoverMessage;
typedef struct _LizardMoverMessage LizardMoverMessage;
typedef struct _WaspMoverMessage WaspMoverMessage;


/* --- enums --- */

typedef enum _Direction {
  DIRECTION__UP = 0,
  DIRECTION__DOWN = 1,
  DIRECTION__LEFT = 2,
  DIRECTION__RIGHT = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DIRECTION)
} Direction;
typedef enum _MessageType {
  MESSAGE_TYPE__CONNECT = 0,
  MESSAGE_TYPE__MOVEMENT = 1,
  MESSAGE_TYPE__DISCONNECT = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MESSAGE_TYPE)
} MessageType;
typedef enum _ClientType {
  CLIENT_TYPE__LIZARD = 0,
  CLIENT_TYPE__ROACH = 1,
  CLIENT_TYPE__DISPLAY_APP = 2,
  CLIENT_TYPE__LIZARD_BODY = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CLIENT_TYPE)
} ClientType;

/* --- messages --- */

/*
 * Message structure
 */
struct  _MessageToServer
{
  ProtobufCMessage base;
  /*
   * 1 = lizard, 2 = roach, 3 = display-app
   */
  int32_t client_id;
  /*
   * 1 = connect, 2 = movement
   */
  MessageType type;
  /*
   * usage depends on client_id and type
   */
  int32_t value;
  /*
   * direction to move the roach
   */
  Direction direction;
  /*
   * true = message accepted, false = message rejected
   */
  protobuf_c_boolean message_accepted;
};
#define MESSAGE_TO_SERVER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message_to_server__descriptor) \
    , 0, MESSAGE_TYPE__CONNECT, 0, DIRECTION__UP, 0 }


/*
 * New structures
 */
struct  _Lizard
{
  ProtobufCMessage base;
  int32_t ch;
  int32_t x;
  int32_t y;
  int32_t score;
  Direction previous_direction;
  /*
   * True if winner, False otherwise
   */
  protobuf_c_boolean is_winner;
};
#define LIZARD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lizard__descriptor) \
    , 0, 0, 0, 0, DIRECTION__UP, 0 }


struct  _Roach
{
  ProtobufCMessage base;
  int32_t ch;
  int32_t x;
  int32_t y;
  protobuf_c_boolean is_eaten;
  int64_t timestamp;
};
#define ROACH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&roach__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  _Wasp
{
  ProtobufCMessage base;
  int32_t ch;
  int32_t x;
  int32_t y;
};
#define WASP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wasp__descriptor) \
    , 0, 0, 0 }


struct  _FieldUpdateMovement
{
  ProtobufCMessage base;
  int32_t num_roaches;
  int32_t num_lizards;
  MessageToServer *message;
  int32_t new_x;
  int32_t new_y;
  Direction prev_direction;
  protobuf_c_boolean is_eaten;
};
#define FIELD_UPDATE_MOVEMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&field_update_movement__descriptor) \
    , 0, 0, NULL, 0, 0, DIRECTION__UP, 0 }


struct  _FieldUpdateConnect
{
  ProtobufCMessage base;
  int32_t client_id;
  int32_t position_in_array;
  Lizard *connected_lizard;
  Roach *connected_roach;
  MessageToServer *message;
};
#define FIELD_UPDATE_CONNECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&field_update_connect__descriptor) \
    , 0, 0, NULL, NULL, NULL }


struct  _FieldUpdateDisconnect
{
  ProtobufCMessage base;
  int32_t client_id;
  int32_t position_in_array;
  MessageToServer *message;
};
#define FIELD_UPDATE_DISCONNECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&field_update_disconnect__descriptor) \
    , 0, 0, NULL }


struct  _RoachMoverMessage
{
  ProtobufCMessage base;
  /*
   * Array of Roach
   */
  size_t n_roaches;
  Roach **roaches;
  /*
   * Number of roaches
   */
  int32_t num_roaches;
  /*
   * Slot roaches
   */
  int32_t slot_roaches;
};
#define ROACH_MOVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&roach_mover_message__descriptor) \
    , 0,NULL, 0, 0 }


struct  _LizardMoverMessage
{
  ProtobufCMessage base;
  /*
   * Array of lizards
   */
  size_t n_lizards;
  Lizard **lizards;
  /*
   * Number of lizards
   */
  int32_t num_lizards;
  /*
   * Slot lizards
   */
  int32_t slot_lizards;
};
#define LIZARD_MOVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lizard_mover_message__descriptor) \
    , 0,NULL, 0, 0 }


struct  _WaspMoverMessage
{
  ProtobufCMessage base;
  /*
   * Array of Wasp
   */
  size_t n_wasps;
  Wasp **wasps;
  /*
   * Number of wasps
   */
  int32_t num_wasps;
  /*
   * Slot roaches
   */
  int32_t slot_wasps;
};
#define WASP_MOVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&wasp_mover_message__descriptor) \
    , 0,NULL, 0, 0 }


/* MessageToServer methods */
void   message_to_server__init
                     (MessageToServer         *message);
size_t message_to_server__get_packed_size
                     (const MessageToServer   *message);
size_t message_to_server__pack
                     (const MessageToServer   *message,
                      uint8_t             *out);
size_t message_to_server__pack_to_buffer
                     (const MessageToServer   *message,
                      ProtobufCBuffer     *buffer);
MessageToServer *
       message_to_server__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message_to_server__free_unpacked
                     (MessageToServer *message,
                      ProtobufCAllocator *allocator);
/* Lizard methods */
void   lizard__init
                     (Lizard         *message);
size_t lizard__get_packed_size
                     (const Lizard   *message);
size_t lizard__pack
                     (const Lizard   *message,
                      uint8_t             *out);
size_t lizard__pack_to_buffer
                     (const Lizard   *message,
                      ProtobufCBuffer     *buffer);
Lizard *
       lizard__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lizard__free_unpacked
                     (Lizard *message,
                      ProtobufCAllocator *allocator);
/* Roach methods */
void   roach__init
                     (Roach         *message);
size_t roach__get_packed_size
                     (const Roach   *message);
size_t roach__pack
                     (const Roach   *message,
                      uint8_t             *out);
size_t roach__pack_to_buffer
                     (const Roach   *message,
                      ProtobufCBuffer     *buffer);
Roach *
       roach__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   roach__free_unpacked
                     (Roach *message,
                      ProtobufCAllocator *allocator);
/* Wasp methods */
void   wasp__init
                     (Wasp         *message);
size_t wasp__get_packed_size
                     (const Wasp   *message);
size_t wasp__pack
                     (const Wasp   *message,
                      uint8_t             *out);
size_t wasp__pack_to_buffer
                     (const Wasp   *message,
                      ProtobufCBuffer     *buffer);
Wasp *
       wasp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wasp__free_unpacked
                     (Wasp *message,
                      ProtobufCAllocator *allocator);
/* FieldUpdateMovement methods */
void   field_update_movement__init
                     (FieldUpdateMovement         *message);
size_t field_update_movement__get_packed_size
                     (const FieldUpdateMovement   *message);
size_t field_update_movement__pack
                     (const FieldUpdateMovement   *message,
                      uint8_t             *out);
size_t field_update_movement__pack_to_buffer
                     (const FieldUpdateMovement   *message,
                      ProtobufCBuffer     *buffer);
FieldUpdateMovement *
       field_update_movement__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   field_update_movement__free_unpacked
                     (FieldUpdateMovement *message,
                      ProtobufCAllocator *allocator);
/* FieldUpdateConnect methods */
void   field_update_connect__init
                     (FieldUpdateConnect         *message);
size_t field_update_connect__get_packed_size
                     (const FieldUpdateConnect   *message);
size_t field_update_connect__pack
                     (const FieldUpdateConnect   *message,
                      uint8_t             *out);
size_t field_update_connect__pack_to_buffer
                     (const FieldUpdateConnect   *message,
                      ProtobufCBuffer     *buffer);
FieldUpdateConnect *
       field_update_connect__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   field_update_connect__free_unpacked
                     (FieldUpdateConnect *message,
                      ProtobufCAllocator *allocator);
/* FieldUpdateDisconnect methods */
void   field_update_disconnect__init
                     (FieldUpdateDisconnect         *message);
size_t field_update_disconnect__get_packed_size
                     (const FieldUpdateDisconnect   *message);
size_t field_update_disconnect__pack
                     (const FieldUpdateDisconnect   *message,
                      uint8_t             *out);
size_t field_update_disconnect__pack_to_buffer
                     (const FieldUpdateDisconnect   *message,
                      ProtobufCBuffer     *buffer);
FieldUpdateDisconnect *
       field_update_disconnect__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   field_update_disconnect__free_unpacked
                     (FieldUpdateDisconnect *message,
                      ProtobufCAllocator *allocator);
/* RoachMoverMessage methods */
void   roach_mover_message__init
                     (RoachMoverMessage         *message);
size_t roach_mover_message__get_packed_size
                     (const RoachMoverMessage   *message);
size_t roach_mover_message__pack
                     (const RoachMoverMessage   *message,
                      uint8_t             *out);
size_t roach_mover_message__pack_to_buffer
                     (const RoachMoverMessage   *message,
                      ProtobufCBuffer     *buffer);
RoachMoverMessage *
       roach_mover_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   roach_mover_message__free_unpacked
                     (RoachMoverMessage *message,
                      ProtobufCAllocator *allocator);
/* LizardMoverMessage methods */
void   lizard_mover_message__init
                     (LizardMoverMessage         *message);
size_t lizard_mover_message__get_packed_size
                     (const LizardMoverMessage   *message);
size_t lizard_mover_message__pack
                     (const LizardMoverMessage   *message,
                      uint8_t             *out);
size_t lizard_mover_message__pack_to_buffer
                     (const LizardMoverMessage   *message,
                      ProtobufCBuffer     *buffer);
LizardMoverMessage *
       lizard_mover_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lizard_mover_message__free_unpacked
                     (LizardMoverMessage *message,
                      ProtobufCAllocator *allocator);
/* WaspMoverMessage methods */
void   wasp_mover_message__init
                     (WaspMoverMessage         *message);
size_t wasp_mover_message__get_packed_size
                     (const WaspMoverMessage   *message);
size_t wasp_mover_message__pack
                     (const WaspMoverMessage   *message,
                      uint8_t             *out);
size_t wasp_mover_message__pack_to_buffer
                     (const WaspMoverMessage   *message,
                      ProtobufCBuffer     *buffer);
WaspMoverMessage *
       wasp_mover_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   wasp_mover_message__free_unpacked
                     (WaspMoverMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*MessageToServer_Closure)
                 (const MessageToServer *message,
                  void *closure_data);
typedef void (*Lizard_Closure)
                 (const Lizard *message,
                  void *closure_data);
typedef void (*Roach_Closure)
                 (const Roach *message,
                  void *closure_data);
typedef void (*Wasp_Closure)
                 (const Wasp *message,
                  void *closure_data);
typedef void (*FieldUpdateMovement_Closure)
                 (const FieldUpdateMovement *message,
                  void *closure_data);
typedef void (*FieldUpdateConnect_Closure)
                 (const FieldUpdateConnect *message,
                  void *closure_data);
typedef void (*FieldUpdateDisconnect_Closure)
                 (const FieldUpdateDisconnect *message,
                  void *closure_data);
typedef void (*RoachMoverMessage_Closure)
                 (const RoachMoverMessage *message,
                  void *closure_data);
typedef void (*LizardMoverMessage_Closure)
                 (const LizardMoverMessage *message,
                  void *closure_data);
typedef void (*WaspMoverMessage_Closure)
                 (const WaspMoverMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    direction__descriptor;
extern const ProtobufCEnumDescriptor    message_type__descriptor;
extern const ProtobufCEnumDescriptor    client_type__descriptor;
extern const ProtobufCMessageDescriptor message_to_server__descriptor;
extern const ProtobufCMessageDescriptor lizard__descriptor;
extern const ProtobufCMessageDescriptor roach__descriptor;
extern const ProtobufCMessageDescriptor wasp__descriptor;
extern const ProtobufCMessageDescriptor field_update_movement__descriptor;
extern const ProtobufCMessageDescriptor field_update_connect__descriptor;
extern const ProtobufCMessageDescriptor field_update_disconnect__descriptor;
extern const ProtobufCMessageDescriptor roach_mover_message__descriptor;
extern const ProtobufCMessageDescriptor lizard_mover_message__descriptor;
extern const ProtobufCMessageDescriptor wasp_mover_message__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_server_5fmessages_2eproto__INCLUDED */
